import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase credentials in .env file');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function inspectEquipmentAndAssets() {
  console.log('üîç Inspecting Equipment Types and Assets structure...\n');

  try {
    // Check equipment_types table
    console.log('üìã Checking equipment_types table...');
    const { data: equipmentTypes, error: etError } = await supabase
      .from('equipment_types')
      .select('*')
      .limit(5);

    if (etError) {
      console.error('‚ùå Error fetching equipment_types:', etError.message);
    } else {
      console.log('‚úÖ equipment_types table exists');
      if (equipmentTypes && equipmentTypes.length > 0) {
        console.log('üìä equipment_types columns:', Object.keys(equipmentTypes[0]));
        console.log('üìä Sample equipment_types data:');
        equipmentTypes.forEach((et, index) => {
          console.log(`   ${index + 1}. ID: ${et.id}, Name: ${et.name || et.name_th}, Name_TH: ${et.name_th || 'N/A'}`);
        });
      } else {
        console.log('üìä equipment_types table is empty');
      }
    }

    console.log('\nüìã Checking assets table...');
    const { data: assets, error: assetsError } = await supabase
      .from('assets')
      .select('*')
      .limit(5);

    if (assetsError) {
      console.error('‚ùå Error fetching assets:', assetsError.message);
    } else {
      console.log('‚úÖ assets table exists');
      if (assets && assets.length > 0) {
        console.log('üìä assets columns:', Object.keys(assets[0]));
        console.log('üìä Sample assets data:');
        assets.forEach((asset, index) => {
          console.log(`   ${index + 1}. ID: ${asset.id}, Equipment Type: ${asset.equipment_type_id}, System: ${asset.system_id}, Serial: ${asset.serial_number}, Status: ${asset.status}`);
        });
      } else {
        console.log('üìä assets table is empty');
      }
    }

    console.log('\nüìã Checking systems table...');
    const { data: systems, error: systemsError } = await supabase
      .from('systems')
      .select('*')
      .limit(5);

    if (systemsError) {
      console.error('‚ùå Error fetching systems:', systemsError.message);
    } else {
      console.log('‚úÖ systems table exists');
      if (systems && systems.length > 0) {
        console.log('üìä systems columns:', Object.keys(systems[0]));
        console.log('üìä Sample systems data:');
        systems.forEach((system, index) => {
          console.log(`   ${index + 1}. ID: ${system.id}, Name: ${system.name || system.name_th}, Location: ${system.location_id}`);
        });
      } else {
        console.log('üìä systems table is empty');
      }
    }

    console.log('\nüìã Checking locations table...');
    const { data: locations, error: locationsError } = await supabase
      .from('locations')
      .select('*')
      .limit(5);

    if (locationsError) {
      console.error('‚ùå Error fetching locations:', locationsError.message);
    } else {
      console.log('‚úÖ locations table exists');
      if (locations && locations.length > 0) {
        console.log('üìä locations columns:', Object.keys(locations[0]));
        console.log('üìä Sample locations data:');
        locations.forEach((location, index) => {
          console.log(`   ${index + 1}. ID: ${location.id}, Name: ${location.name}`);
        });
      } else {
        console.log('üìä locations table is empty');
      }
    }

    // Check relationships
    console.log('\nüîó Checking relationships...');
    
    // Get assets with their equipment types and systems
    const { data: assetsWithRelations, error: relError } = await supabase
      .from('assets')
      .select(`
        id,
        serial_number,
        status,
        equipment_type_id,
        system_id,
        equipment_types (
          id,
          name,
          name_th
        ),
        systems (
          id,
          name,
          name_th,
          location_id,
          locations (
            id,
            name
          )
        )
      `)
      .limit(3);

    if (relError) {
      console.error('‚ùå Error fetching relationships:', relError.message);
    } else if (assetsWithRelations && assetsWithRelations.length > 0) {
      console.log('‚úÖ Relationship data:');
      assetsWithRelations.forEach((asset, index) => {
        console.log(`   ${index + 1}. Asset: ${asset.id}`);
        console.log(`      Equipment Type: ${asset.equipment_types?.name_th || asset.equipment_types?.name || 'N/A'}`);
        console.log(`      System: ${asset.systems?.name_th || asset.systems?.name || 'N/A'}`);
        console.log(`      Location: ${asset.systems?.locations?.name || 'N/A'}`);
        console.log(`      Serial: ${asset.serial_number}, Status: ${asset.status}`);
      });
    }

    console.log('\nüéØ Summary:');
    console.log('Equipment Types = ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡πÉ‡∏´‡∏ç‡πà (‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏ñ‡πÅ‡∏ó‡∏£‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå, ‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥, ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß)');
    console.log('Assets = ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏¢‡πà‡∏≠‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ (‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏ñ‡πÅ‡∏ó‡∏£‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ñ‡∏±‡∏ô‡∏ó‡∏µ‡πà 1, ‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 2)');
    console.log('Systems = ‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏•‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô, ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞)');
    console.log('Locations = ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏£‡πà A, ‡πÇ‡∏£‡∏á‡πÄ‡∏Å‡πá‡∏ö)');

  } catch (error) {
    console.error('‚ùå Unexpected error:', error);
  }
}

// Run the inspection
inspectEquipmentAndAssets();